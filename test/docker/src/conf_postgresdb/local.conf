# Default application.conf runs the Case Service with
#  Cassandra as storage for events and
#  Postgres as storage for the projections to enable the Case queries and
#  Akka as the runtime system
# All of these can be configured through this conf file.
# In addition many settings can also be passed as environment variables

akka {
  loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 10s

  actor {
    serialize-messages = on

    serializers {
      cafienne_serializer = "org.cafienne.infrastructure.serialization.CafienneSerializer"

      # offset_serializer is used to serialize offset snapshots
      # offset_serializer = "org.cafienne.infrastructure.eventstore.OffsetSerializer"
    }
    serialization-bindings {
      "org.cafienne.infrastructure.serialization.CafienneSerializable" = cafienne_serializer

      # Current offsets are WrappedOffset objects
      #"org.cafienne.infrastructure.eventstore.WrappedOffset" = offset_serializer
    }
  }

  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      # Enable the line below to automatically start the snapshot-store when the actorsystem is started
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }
}

cafienne {
  # Engine wide platform settings
  platform {
    # Platform has owners that are allowed to create/disable/enable tenants
    #  This property specifies the set of user-id's that are owners
    #  This array may not be empty.
    owners = ["admin", "admin@example.com", "CgVhZG1pbhIFbG9jYWw"]
    #owners = ${?CAFIENNE_PLATFORM_OWNERS}
    # Default tenant will be used when a user does not provide the tenant as a parameter to
    #  the API call (e.g. in StartCase). When the user is member of only one tenant,
    #  then that tenant will be submitted along with the StartCase command.
    #  If the user belongs to multiple tenants, then this default-tenant option will be passed.
    default-tenant = "world"
    default-tenant = ${?CAFIENNE_PLATFORM_DEFAULT_TENANT}
    # bootstrap-tenants holds a reference to a json or yaml file that has default tenant information.
    #  E.g., tenant name, tenant owners, tenant users can be given in this file.
    #  During launch of the case engine, the file will be scanned and a special CreateTenant command is sent
    #  into the system, thereby setting up a default tenant with owners and users.
    #  The bootstrap configuration will search for this file, and try to parse it into a standard akka Config
    #  object.
    # If the bootstrap-tenants property is not filled, the system will search for a file that holds
    #  the default tenant name plus either a .conf, .json, .yml or .yaml extension.
    #  In case of tenant 'world', the system would search for existence in the following order:
    #  - 'world.conf'
    #  - 'world.json'
    #  - 'world.yml'
    #  - 'world.yaml'
    # If none of these files are found, the bootstrap attempt will be skipped.
    bootstrap-tenants = "bootstrap/world.tenant.conf"
  }
  engine {
    interpreter {
      cmmn-fault-handling = true // Anonymous conf runs with pure CMMN fault handling to reuse the infra
    }
  }
  api {
    bindhost = "0.0.0.0"
    bindport = 2027

    security {
      # configuration settings for OpenID Connect with test Auth server
      oidc {  
        connect-url = "http://test_token_service:2077/.well-known/openid-configuration"
        token-url = "http://test_token_service:2077/token"
        key-url = "http://test_token_service:2077/keys"
        authorization-url = "http://localhost:33077/auth"
        issuer = "http://localhost:33077"
      }
	  
      ###################################################################################################
      ##                                                                                               ##
      ## Fill this setting to true to allow developers to access engine events without authentication  ##
      ##                                                                                               ##
      ##   WARNING - Enabling opens up the full engine in read-only mode for anyone to access          ##
      ##                                                                                               ##
      ###################################################################################################
      debug.events.open = true
      debug.events.open = ${?CAFIENNE_DEBUG_EVENTS}
    }
  }  

  read-journal = "jdbc-read-journal"

  query-db {
    # This setting tells cafienne which journal to use for reading events.
    #  If this omitted, cafienne will try to guess the read journal, based on the akka settings
    profile = ""
    profile = ${?PROJECTION_DB_PROFILE}
    db {
      driver = ""
      driver =  ${?PROJECTION_DB_DRIVER}
      ###################################################################
      ##                                                               ##
      ##  Database schema 'cafienne-query' must be created manually    ##
      ##                                                               ##
      ###################################################################

      ###################################################################
      ##                                                               ##
      ##  MAKE SURE TO FILL USER AND PASSWORD FOR CONNECTION           ##
      ##                                                               ##
      ###################################################################
      user = ""
      user =  ${?PROJECTION_DB_USER}
      password = ""
      password =  ${?PROJECTION_DB_PASSWORD}
      numThreads = 10
      connectionTimeout = 5000
      validationTimeout = 5000

      url = ""
      url =  ${?PROJECTION_DB_URL}
    }
  }

  # The case engine reads definitions as XML files from disk and/or the classpath.
  # The files are cached in-memory, based on their lastModified timestamp
  # (i.e., if you change a file on disk, the engine will reload it into the cache).
  # By default, the engine will read from the configured location. If the definitions file cannot be found
  # in this location, the engine will try to load it as a resource from the classpath, hence enabling to ship
  # fixed definitions in a jar file.
  definitions {
    provider = "org.cafienne.cmmn.repository.file.FileBasedDefinitionProvider"
    location = "./definitions"
    location =  ${?CAFIENNE_CMMN_DEFINITIONS_PATH}
    cache {
      size = 100
    }
  }

  actor {
    # the seconds of idle time after which a case actor is removed from akka memory
    # if the case has not received new commands after the specified number of seconds,
    # the case engine will ask akka to remove the case from memory to avoid memory leaks.
    idle-period = 600

    # If debug is true, then all StartCase commands by default will run in debug mode,
    #  unless specified otherwise in the command
    debug = false
  }

  timer-service {
    # The number of seconds that the TimerService should wait to persist it's snapshot
    # after a timer has occurred or has been canceled.
    # Note: for setting timers always immediately snapshots are stored
    persist-delay = 60
  }
}

#######################################################################################
##                                                                                   ##
##  Below are settings for Akka Event Storage in the JDBC Database                   ##
##                                                                                   ##
##   As of now, the database schema 'cafienne-eventstore' must be created manually   ##
##                                                                                   ##
#######################################################################################
akka-persistence-jdbc {
  database-provider-fqcn = "org.cafienne.journal.jdbc.EventDatabaseProvider"
  shared-databases {
    slick {
      profile =""
      profile = ${?EVENT_DB_PROFILE}
      db {
        connectionPool = disabled
        driver = ""
        driver = ${?EVENT_DB_DRIVER}
        url = ""
        url = ${?EVENT_DB_URL}
        # User name to connect, update and query
        user = ""
        user = ${?EVENT_DB_USER}
        password = ""
        password = ${?EVENT_DB_PASSWORD}
        numThreads = 5
        connectionTimeout = 5000
        validationTimeout = 5000
        maxConnections = 5
        minConnections = 1
      }
    }
  }
}

  jdbc-journal {
    use-shared-db = "slick"
  }

  # the akka-persistence-snapshot-store in use
  jdbc-snapshot-store {
    use-shared-db = "slick"
  }

  # the akka-persistence-query provider in use
  jdbc-read-journal {
    use-shared-db = "slick"
  }